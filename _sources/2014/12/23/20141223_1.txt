Vagrantで仮想マシンを作成する
=============================

| アプリ開発のプロジェクトやインフラ技術検証を要するプロジェクトを複数掛け持ちすると、それぞれ必要なアーキテクチャが異なるがゆえ、
  ローカルの開発環境/検証環境はぐちゃぐちゃになり、いったいこれはバグなのかバグでないのかよくわからないことになったり、
  新しいメンバがきたときに開発環境/検証環境を準備するだけで数日間を要するってことも珍しくないと思います。
| また、開発環境の構築といった側面だけでなく、商用環境もここ最近は仮想環境上に構築することが当たり前になっているので、
  そういった側面でも、Vagrantの導入は問題解決につながると思い、ちょっとまとめてみました。


1. VirtualBoxのインストール
---------------------------

| https://www.virtualbox.org/ から Downloads -> VirtualBox x.x.xx for Windows hosts をクリックして、インストーラをダウンロードします(2014.12.23現在はVirtualBox-4.3.20-96997-Win.exeでした)。
| すべてデフォルト設定で、インストーラを実行します。

.. image:: /img/20141223-1-1.png


2. 環境変数の確認/設定
----------------------

| 環境変数のシステム変数の"Path"で、"{インストールドライブ}:\\{インストールフォルダ}\\VirtualBox\\"にパスが通っていることを確認します。もし、通ってない場合は設定を追加します。

.. image:: /img/20141223-1-2.png


3. Vagrantのインストール
------------------------

| https://www.vagrantup.com/ から Download -> Windows -> をクリックして、インストーラをダウンロードします(2014.12.23現在はvagrant_1.6.5.msiでした)。
| すべてデフォルト設定で、インストーラを実行します。

.. image:: /img/20141223-1-3.png


4. 環境変数の確認/設定
----------------------

| 環境変数のシステム変数の"Path"で、"{インストールドライブ}:\\{インストールフォルダ}\\Vagrant\\bin\\"にパスが通っていることを確認します。もし、通ってない場合は設定を追加します。

.. image:: /img/20141223-1-4.png


| 
| 設定が完了したら、GitBashを起動し、以下のコマンドを実行すると、Vagrantがインストールされていることが確認できます。
| `参考：WindowsのBashシェル環境を整える<http://galoisvsnaoya.github.io/blog/2014/12/15/20141215-1.html>`

.. code-block:: html

   $ vagrant --version
   Vagrant 1.6.5


5. Vagrantを使って仮想マシンをクローン
--------------------------------------

| では、Vagrantを使って、実際にVirtualBox上に仮想マシンをクローンしていきます。
| 作成する仮想マシンは、Vagrant用の仮想マシンテンプレート(Vagrantの世界ではこれをBoxファイルと呼びます)リポジトリサイト :doc: http://www.vagrantbox.es/ より、
  今回は、"CentOS 6.5 x86_64"とすることにします。

1) フォルダ作成
~~~~~~~~~~~~~~~

| GitBashでVagrantでクローンする仮想マシンを登録するフォルダを作成し、そこに移動します。

.. code-block:: html

   $ cd ~/
   $ mkdir -p vagrant
   $ cd ~/vagrant


| "CentOS 6.5 x86_64"の仮想マシンを登録するフォルダを作成し、そこに移動します。

.. code-block:: html

   $ mkdir -p centos65x8664base
   $ cd ~/vagrant/centos65x8664base


2) Boxファイルのダウンロード
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| "CentOS 6.5 x86_64"のBoxファイルをダウンロードします。

.. code-block:: html

   $ vagrant box add vagrant-centos65x8664 https://github.com/2creatives/vagrant-centos/releases/download/v6.5.3/centos65-x86_64-20140116.box
   ==> box: Adding box 'centos65x8664base' (v0) for provider:
   box: Downloading: https://github.com/2creatives/vagrant-centos/releases/download/v6.5.3/centos65-x86_64-20140116.box
   box: Progress: 100% (Rate: 3033k/s, Estimated time remaining: --:--:--)
   ==> box: Successfully added box 'centos65x8664base' (v0) for 'virtualbox'!


| Boxファイルがダウンロードできたら、以下のコマンドで、VagrantのBoxListに追加されていることを確認します。
| "centsos65x8664base"はBox名、"virtualbox"はProviderを意味します。
| "0"は"centos65x8664base"というBox名の中でそのBoxファイルがListの何番目かを意味するのかな…たぶん。ここはあんまし自信なし。
| ちなみに、Boxファイルは、"{カレントドライブ}:\\Users\\{ユーザ名}\\.vagrant.d\\boxes\\centos65x8664base\\0\\virtualbox"ダウンロードされています。

.. code-block:: html

   $ vagrant box list
   centos65x8664base (virtualbox, 0)


3) Boxファイルの初期化
~~~~~~~~~~~~~~~~~~~~~~

| Boxファイルを初期化します。

.. code-block:: html

   $ vagrant init centos65x8664base
   A `Vagrantfile` has been placed in this directory. You are now
   ready to `vagrant up` your first virtual environment! Please read
   the comments in the Vagrantfile as well as documentation on
   `vagrantup.com` for more information on using Vagrant.


| 初期化すると、ダウンロードしたBoxファイルを、
| 指定されたBox名"centsos65x8664base"でProvider"virtualbox"に仮想マシンとして追加するためのVagrantfileと呼ばれる定義ファイルが作成されます。

.. code-block:: html

   $ ls
   Vagrantfile

| 作成されたVagrantfileは以下のような定義が記載されています。
| 詳細はまた別途まとめたいと思います。ちなみに、以下はデフォルトの状態です。

.. code-block:: html

   # -*- mode: ruby -*-
   # vi: set ft=ruby :
   
   # Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
   
   VAGRANTFILE_API_VERSION = "2"
   
   Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
     # All Vagrant configuration is done here. The most common configuration
     # options are documented and commented below. For a complete reference,
     # please see the online documentation at vagrantup.com.
   
     # Every Vagrant virtual environment requires a box to build off of.
     config.vm.box = "centos65x8664base"
   
     # Disable automatic box update checking. If you disable this, then
     # boxes will only be checked for updates when the user runs
     # `vagrant box outdated`. This is not recommended.
     # config.vm.box_check_update = false
   
     # Create a forwarded port mapping which allows access to a specific port
     # within the machine from a port on the host machine. In the example below,
     # accessing "localhost:8080" will access port 80 on the guest machine.
     # config.vm.network "forwarded_port", guest: 80, host: 8080
   
     # Create a private network, which allows host-only access to the machine
     # using a specific IP.
     # config.vm.network "private_network", ip: "192.168.33.10"
   
     # Create a public network, which generally matched to bridged network.
     # Bridged networks make the machine appear as another physical device on
     # your network.
     # config.vm.network "public_network"
   
     # If true, then any SSH connections made will enable agent forwarding.
     # Default value: false
     # config.ssh.forward_agent = true
   
     # Share an additional folder to the guest VM. The first argument is
     # the path on the host to the actual folder. The second argument is
     # the path on the guest to mount the folder. And the optional third
     # argument is a set of non-required options.
     # config.vm.synced_folder "../data", "/vagrant_data"
   
     # Provider-specific configuration so you can fine-tune various
     # backing providers for Vagrant. These expose provider-specific options.
     # Example for VirtualBox:
     #
     # config.vm.provider "virtualbox" do |vb|
     #   # Don't boot with headless mode
     #   vb.gui = true
     #
     #   # Use VBoxManage to customize the VM. For example to change memory:
     #   vb.customize ["modifyvm", :id, "--memory", "1024"]
     # end
     #
     # View the documentation for the provider you're using for more
     # information on available options.
   
     # Enable provisioning with CFEngine. CFEngine Community packages are
     # automatically installed. For example, configure the host as a
     # policy server and optionally a policy file to run:
     #
     # config.vm.provision "cfengine" do |cf|
     #   cf.am_policy_hub = true
     #   # cf.run_file = "motd.cf"
     # end
     #
     # You can also configure and bootstrap a client to an existing
     # policy server:
     #
     # config.vm.provision "cfengine" do |cf|
     #   cf.policy_server_address = "10.0.2.15"
     # end
   
     # Enable provisioning with Puppet stand alone.  Puppet manifests
     # are contained in a directory path relative to this Vagrantfile.
     # You will need to create the manifests directory and a manifest in
     # the file default.pp in the manifests_path directory.
     #
     # config.vm.provision "puppet" do |puppet|
     #   puppet.manifests_path = "manifests"
     #   puppet.manifest_file  = "default.pp"
     # end
   
     # Enable provisioning with chef solo, specifying a cookbooks path, roles
     # path, and data_bags path (all relative to this Vagrantfile), and adding
     # some recipes and/or roles.
     #
     # config.vm.provision "chef_solo" do |chef|
     #   chef.cookbooks_path = "../my-recipes/cookbooks"
     #   chef.roles_path = "../my-recipes/roles"
     #   chef.data_bags_path = "../my-recipes/data_bags"
     #   chef.add_recipe "mysql"
     #   chef.add_role "web"
     #
     #   # You may also specify custom JSON attributes:
     #   chef.json = { mysql_password: "foo" }
     # end
   
     # Enable provisioning with chef server, specifying the chef server URL,
     # and the path to the validation key (relative to this Vagrantfile).
     #
     # The Opscode Platform uses HTTPS. Substitute your organization for
     # ORGNAME in the URL and validation key.
     #
     # If you have your own Chef Server, use the appropriate URL, which may be
     # HTTP instead of HTTPS depending on your configuration. Also change the
     # validation key to validation.pem.
     #
     # config.vm.provision "chef_client" do |chef|
     #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
     #   chef.validation_key_path = "ORGNAME-validator.pem"
     # end
     #
     # If you're using the Opscode platform, your validator client is
     # ORGNAME-validator, replacing ORGNAME with your organization name.
     #
     # If you have your own Chef Server, the default validation client name is
     # chef-validator, unless you changed the configuration.
     #
     #   chef.validation_client_name = "ORGNAME-validator"
   end


4) 仮想マシンの起動
~~~~~~~~~~~~~~~~~~~

| 仮想マシンを起動します。
| 起動に失敗する場合は、BIOS設定で"Intel VT"などが無効になっている可能性があるので有効化しておいてください。

.. code-block:: html

   $ vagrant up
   Bringing machine 'default' up with 'virtualbox' provider...
   ==> default: Importing base box 'centos65x8664base'...
   ==> default: Matching MAC address for NAT networking...
   ==> default: Setting the name of the VM: centos65x8664base_default_1419175685395_89423
   ==> default: Clearing any previously set network interfaces...
   ==> default: Preparing network interfaces based on configuration...
       default: Adapter 1: nat
   ==> default: Forwarding ports...
       default: 22 => 2222 (adapter 1)
   ==> default: Booting VM...
   ==> default: Waiting for machine to boot. This may take a few minutes...
       default: SSH address: 127.0.0.1:2222
       default: SSH username: vagrant
       default: SSH auth method: private key
       default: Warning: Connection timeout. Retrying...
       default: Warning: Remote connection disconnect. Retrying...
   ==> default: Machine booted and ready!
   ==> default: Checking for guest additions in VM...
   ==> default: Mounting shared folders...
       default: /vagrant => {カレントドライブ}:/Users/{ユーザ名}/vagrant/centos65x8664base


| 仮想マシンが起動できたら、状態を確認します。

.. code-block:: html

   $ vagrant status
   Current machine states:
   
   default                   running (virtualbox)
   
   The VM is running. To stop this VM, you can run `vagrant halt` to
   shut it down forcefully, or you can run `vagrant suspend` to simply
   suspend the virtual machine. In either case, to restart it again,
   simply run `vagrant up`.


| VirtulBoxを起動すると、以下のように仮想マシンが追加され起動中となっていることが確認できます。

.. image:: /img/20141223-1-5.png


5) 仮想マシンへのログイン/ログアウト
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| 仮想マシンにssh接続でログインします。ユーザ名/パスワードは、vagrant/vagrantです。

.. code-block:: html

   $ vagrant ssh
   [vagrant@centos65x8664base ~]$ cat /etc/issue|head -1
   CentOS release 6.5 (Final)


| rootユーザにスイッチします。ユーザ名/パスワードは、root/vagrantです。

.. code-block:: html

   [vagrant@centos65x8664base ~]$ su root
   Password
   [root@centos65x8664base vagrant]#


| ログアウトします。

.. code-block:: html

   [root@centos65x8664base vagrant]# exit
   [vagrant@centos65x8664base ~]$ exit


6) 仮想マシンのシャットダウン
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| ログアウトできたら、仮想マシンをシャットダウンします。

.. code-block:: html

   $ vagrant halt
   ==> default: Attempting graceful shutdown of VM...


| 仮想マシンがシャットダウンできたら、状態を確認します。

.. code-block:: html

   $ vagrant status
   Current machine states:
   
   default                   poweroff (virtualbox)
   
   The VM is powered off. To restart the VM, simply run `vagrant up`
   

6. 仮想マシンの複製
-------------------

| ここまでは仮想マシンを作成する手順を記載しましたが、実際の使い方を考えると、
  作成した仮想マシンをコピー元として、仮想マシンを複製(例えばその複製した仮想マシンを開発環境用1(Spring Boot/Java8アプリ)としたり)、
  その複製した仮想マシンに追加パッケージやミドルウェアのインストールを実施し、それを配布するという感じになると思います。
| したがって、ここでは仮想マシンをコピーする手順を説明します。

1) コピー元仮想マシンのBoxファイル作成
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| コピー元仮想マシンのVagrantfileがあるフォルダに移動し、Boxファイルを作成します。

.. code-block:: html

   $ cd ~/vagrant/centos65x8664base
   $ vagrant package
   ==> default: Clearing any previously set forwarded ports...
   ==> default: Exporting VM...
   ==> default: Compressing package to: {カレントドライブ}:/Users/{ユーザ名}/vagrant/centos65x8664base/package.box


2) 複製する仮想マシンのフォルダ作成
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| 複製する仮想マシンのフォルダを作成し、そこに移動します。

.. code-block:: html

   $ cd ~/vagrant
   $ mkdir -p centos65x8664dev1
   $ cd ~/vagrant/centos65x8664dev1


3) Boxファイルの取り込み
~~~~~~~~~~~~~~~~~~~~~~~~

| コピー元仮想マシンで作成したBoxファイルを、複製する仮想マシンのフォルダに移動し、このBoxファイルをVagrantのBoxListに追加します。

.. code-block:: html

   $ vagrant box add centos65x8664dev1 ~/vagrant/centos65x8664base/package.box
   ==> box: Adding box 'centos65x8664dev1' (v0) for provider:
       box: Downloading: file://{カレントドライブ}:/Users/{ユーザ名}/vagrant/centos65x8664base/package.box
       box: Progress: 100% (Rate: 267M/s, Estimated time remaining: --:--:--)
   ==> box: Successfully added box 'centos65x8664dev1' (v0) for 'virtualbox'!


| Boxファイルが取り込みできたら、以下のコマンドで、VagrantのBoxListに追加されていることを確認します。

.. code-block:: html

   $ vagrant box list
   centos65x8664base (virtualbox, 0)
   centos65x8664dev1 (virtualbox, 0)


4) Boxファイルの初期化
~~~~~~~~~~~~~~~~~~~~~~

| Boxファイルを初期化します。

.. code-block:: html

   $ vagrant init centos65x8664dev1
   A `Vagrantfile` has been placed in this directory. You are now
   ready to `vagrant up` your first virtual environment! Please read
   the comments in the Vagrantfile as well as documentation on
   `vagrantup.com` for more information on using Vagrant.
   
   $ ls
   Vagrantfile


5) 仮想マシンの起動
~~~~~~~~~~~~~~~~~~~

| 仮想マシンを起動します。

.. code-block:: html

   $ vagrant up
   Bringing machine 'default' up with 'virtualbox' provider...
   ==> default: Importing base box 'centos65x8664dev1'...
   ==> default: Matching MAC address for NAT networking...
   ==> default: Setting the name of the VM: centos65x8664dev1_default_141917668894_96328
   ==> default: Clearing any previously set network interfaces...
   ==> default: Preparing network interfaces based on configuration...
       default: Adapter 1: nat
   ==> default: Forwarding ports...
       default: 22 => 2222 (adapter 1)
   ==> default: Booting VM...
   ==> default: Waiting for machine to boot. This may take a few minutes...
       default: SSH address: 127.0.0.1:2222
       default: SSH username: vagrant
       default: SSH auth method: private key
       default: Warning: Connection timeout. Retrying...
   ==> default: Machine booted and ready!
   ==> default: Checking for guest additions in VM...
   ==> default: Mounting shared folders...
       default: /vagrant => {カレントドライブ}:/Users/{ユーザ名}/vagrant/centos65x8664dev1


| 仮想マシンが起動できたら、状態を確認します。

.. code-block:: html

   $ vagrant status
   Current machine states:
   
   default                   running (virtualbox)
   
   The VM is running. To stop this VM, you can run `vagrant halt` to
   shut it down forcefully, or you can run `vagrant suspend` to simply
   suspend the virtual machine. In either case, to restart it again,
   simply run `vagrant up`.


| VirtulBoxを起動すると、以下のように仮想マシンが追加され起動中となっていることが確認できます。

.. image:: /img/20141223-1-6.png


6) 仮想マシンへのログイン/ログアウト
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| 仮想マシンにssh接続でログインします。ユーザ名/パスワードは、vagrant/vagrantです。

.. code-block:: html

   $ vagrant ssh
   [vagrant@centos65x8664dev1 ~]$ cat /etc/issue|head -1
   CentOS release 6.5 (Final)


| rootユーザにチェンジします。ユーザ名/パスワードは、root/vagrantです。

.. code-block:: html

   [vagrant@centos65x8664dev1 ~]$ su root
   Password
   [root@centos65x8664dev1 vagrant]#


| ログアウトします。

.. code-block:: html

   [root@centos65x8664dev1 vagrant]# exit
   [vagrant@centos65x8664dev1 ~]$ exit


7) 仮想マシンのシャットダウン
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| ログアウトできたら、仮想マシンをシャットダウンします。

.. code-block:: html

   $ vagrant halt
   ==> default: Attempting graceful shutdown of VM...
   

| 仮想マシンがシャットダウンできたら、状態を確認します。

.. code-block:: html

   $ vagrant status
   Current machine states:
   
   default                   poweroff (virtualbox)
   
   The VM is powered off. To restart the VM, simply run `vagrant up`


7. 仮想マシンの削除
-------------------

1) 仮想マシンの削除
~~~~~~~~~~~~~~~~~~~

| 複製した仮想マシンが不要になったら、削除をします。

.. code-block:: html

   $ vagrant destroy
   default: Are you sure you want to destroy the 'default' VM? [y/N] y
   ==> default: Destroying VM and associated drives...


| 仮想マシンを削除すると、VirtualBox上から仮想マシンは消えます。

.. image:: /img/20141223-1-7.png


| ですが、まだ、VagrantのBoxListから削除されているわけではありません。

.. code-block:: html

   $ vagrant box list
   centos65x8664base (virtualbox, 0)
   centos65x8664dev1 (virtualbox, 0)


2) Boxの削除
~~~~~~~~~~~~

| BoxListから削除するには、以下でBoxをremoveします。

.. code-block:: html

   $ vagrant box remove centos65x8664dev1 virtualbox
   WARNING: The second argument to `vagrant box remove`
   is deprecated. Please use the --provider flag. This
   feature will stop working in the next version.
   Removing box 'centos65x8664dev1' (v0) with provider 'virtualbox'...

   $ vagrant box list
   centos65x8664base (virtualbox, 0)


.. author:: default
.. categories:: tech
.. tags:: vagrant
.. comments::
